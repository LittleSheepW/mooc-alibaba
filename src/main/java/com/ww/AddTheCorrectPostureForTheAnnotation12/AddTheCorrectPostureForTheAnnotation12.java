package com.ww.AddTheCorrectPostureForTheAnnotation12;

/**
 * @author: Sun
 * @create: 2019-11-22 10:07
 * @version: v1.0
 */
public class AddTheCorrectPostureForTheAnnotation12 {

    /**
     *《手册》21 页，第八节注释规约部分对注释规范的要点给出了比较全面的指导：
     *【强制】所有类都必须添加创建者和日期。
     *【强制】所有的枚举类型字段都必须有注释，说明每个数据项的用途。
     *【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等修改。
     *【参考】特殊标记，请注明标记人与标记时间。
     *
     * 补充：
     *【强制】方法内部单行注释，在被注释语句上方另起一行， 使用//注释。方法内部多行注释使用/※※/注释,注意与代码对齐。方法内部单行注释，
     * 在被注释的语句上方另起一行。主要体现了整体思维，也是为了实现”代码意群“效应，从视觉上让注释和下面的代码更接近。
     *【强制】所有的类都必须添加创建者和创建时间。类添加了创建者，读者就可以知道第一个创建该类的人(一般是最熟悉的人)是谁，遇到问题可以找他
     * 核实。类添加了创建时间，有助于阅读此代码的人更方便地了解类的编写时间。另外在这里给出一个技巧:如果我们使用的是IDEA，并用GIT进行代码
     * 版本管理，可以在编辑器的左侧行数附近，右键选择“Annotate”，可以查看某行代码修改的人和时间。如果你对该部分代码有疑问，可以快速定位到
     * 修改的人和修改时间，对我们协调和解决问题有极大的帮助。
     *【强制】如果代码逻辑和注释不符，必须进行修改。代码逻辑和注释不符，容易让使用者误用，增加出错的概率，容易造成返工降低开发效率。
     * 通常由于开发者理解有误，偶尔会写出了误导性注释，如果发现这类问题一定要认真核实，如果确认是误导性注释，一定要及时修改，避免团队其他成员重复趟坑。
     *【推荐】特殊注释要加上功能名称。通常我们会有很多项目的TODO注释，但是最常遇到的需求是快速定位正在开发的某个功能的TODO注释或者其他某
     * 个想修改的功能的TODO进行修改。此时如果TODO较多且没有标注功能名称，要想找到自己要修改的TODO项，通常需要通过搜索自己的姓名来查找，如果
     * TODO较多查找起来将非常耗时。
     *【推荐】方法注释中建议添加相关需求文档，接口文档地址。后面自己也可能经常需要找接口的文档链接，开发过程中遇到问题也可及时和对接人沟通，
     * 这将极大提供工作效率。
     *【推荐】容易费解的地方一定要加注释。自己某块代码的写法很诡异，一定要注明原因。
     *【推荐】推荐git提交注释的格式为: [功能名称] <提交类型>修改点描述。 修改的性质包括:新增、删除、修改、修复等。
     * 正例：[a功能] <add>某某接口
     *【参考】利用//-----//或/※----分组----※/注释实现方法分组
     *【参考】多写设计的目的，注意事项，不要写从代码显而易见的注释。很多人喜欢写一些显而易见的注释，导致自己花费了时间对团队其他人却没太大帮助。
     * 如果方法比较复杂，尽量写设计的目的和注意的事项等更有帮助的内容。
     *【参考】可以将方法的核心逻辑拆分成多个步骤，关键步骤在函数内部可以加上注释并带上序号，之前空一行。函数内的逻辑注释，将有助于我们养成
     * 任务拆解的思维，也有助于自己或团队其他成员快速理解编程的逻辑。这样当代码行数超过80行时，开发者也可以根据核心逻辑注释来拆分子函数。
     * 即使不在核心步骤添加注释(或提取子函数)，在核心步骤之间加上一个空格行，也可以方便读者理解。可以在每个大的步骤前加注释，也可以在核心
     * 逻辑前将注释分条列举。
     */

    /**
     * 本节问题：
     * 1、你平时写注释吗?
     * 答：写
     *
     * 2、你知道注释的目的是什么?
     * 答：辅助读代码的人员更快速的理解代码。
     *
     * 3、有哪些好的注释范例?
     * (1)常规注释主要指普通的注释，比如每个接口几乎都会有的: 接口的功能，接口的参数以及含义，接口异常和出现异常的原因，接口的返回值。
     * (2)工具类注释主要包含：函数的功能，函数的使用范例，函数的参数和返回值描述，该函数出现的起始版本等。
     * (3)废弃代码注释：废弃的接口要给出废弃的原因和替代方案等。
     * (4)警告类注释：比如有很多程序员为了方便测试会写一个测试控制器，如TestController ，来提供HTTP接口的控制器，预留一些“ 测试后门”，
     * 通常会有一个比较好的做法是放到某个特定测试分支，不会带到线上。那么如果有些接口操作姿势“非常特别”或者“非常危险”，一定要接口上加上注释，
     * 防止其他人员误触，导致故障。如果某个函数仅供内部使用或者仅供某个功能使用，最好可以在注释上加上警示。
     *
     * 4、为什么会有这些规定?
     * 答：主要原因应该是为了帮助读代码的人员快速理解代码。
     */
}
