package com.ww.CorrectPostureForCodeDebugging24;

import com.sun.xml.internal.bind.v2.TODO;

/**
 * @author: Sun
 * @create: 2019-12-11 11:36
 * @version: v1.0
 */
public class CorrectPostureForCodeDebugging24 {

    /**
     *《手册》对代码调试介绍较少，其中第37页SQL语句章节有如下描述:
     *【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。
     * 由此可见，可调试也是Java程序员编码要考虑的重要一环。
     *
     * DEBUG相关按钮作用：
     * 1 表示Step Over即跳过，执行到下一行;
     * 2 表示Step Into即步入，可以进入自定义的函数;
     * 3 表示Force Step Into即强制进入，可以进入到任何方法(包括第三方库或JDK源码) ;
     * 4 表示Step Out即跳出，如果当前调试的方法没问题，可以使用此功能跳出(结束)当前函数;
     * 5 表示Drop frame即移除帧，相当于回退到上一级;
     * 6 表示Run to Cursor即执行到鼠标所在的代码行数。
     * 通常设置断点后，通过单步观察运行步骤，通过变量区观察“当前”的数据状况，来学习源码或者排查错误的原因。
     *
     * 调试的高级技巧
     * 1.多线程调试：设置断点时，在断点上右键可以选择断点的模式，选择"Thread"模式，可以开启多线程调试。可以将一个线程断下来，通过“Frames”
     * 选项卡切换到不同线程线程，控制不同线程的运行。
     * 2.条件断点：和多线程调试类似，我们可以对断点设置条件，只有满足设置的条件才会生效。
     * 该功能在测试环境中非常有用。比如你提供视频的转码功能作为二方库给其他团队使用，此时代码发布到测试环境，如果设置普通断点，那么所有的请求都会
     * 被暂停，影响其他功能的调试。此时就可以设置条件断点，将某个待测试的视频ID或者业务方ID等关键标识作为断点的条件，就不会相互影响。
     * 3.后悔药：Drop frame按钮即移除帧，相当于回退到上一级，这给我们提供了“后悔药”。当我们调试某个问题时，一不小心走过了，往往会重新运行调试，
     * 非常浪费时间，此时可以通过该功能实现“回退”。
     * 4.偷天换日：我们实际调试代码时，会有这样的场景，调用的参数传错了，我们并不需要修改参数重新运行。我们可以在调试过程中对调试对象的值进行动态修改。
     * 在variables选项卡中选中指定变量，然后右键，选择“set value”菜单，即可对变量的值进行修改。
     * 5.表达式：在调试过程中可以对变量执行表达式，这对排查问题有很大帮助。
     * 6.watch：如果我们想在调试过程中查看某个对象的某个属性，总是使用表达式很不方便，是否可以将表达式计算的结果总是显示在变量区域呢?
     * 答案是有的，使用watch功能即可实现。在变量区右键-> "New Watch"- >输入想要观察的表达式即可。
     * 7.看内存对象 我们可以在Memory选项栏下，搜索对象对应的类就可以看到该类对象的数量，双击就可以通过表达式来过滤，非常强大。
     * 8.异常断点使用场景：在一个循环中有一个数据报错，想在报错的时候断点，因为你不知道报错数据的条件是什么，所以无法使用条件断点，而且循环次数很多，一次一次断掉放过非常麻烦。
     * 第一步:在我们想要研究的地方断点，比如我们想研究i为几时，条件为true (只是一个演示);
     * 第二步:我们可以点击左下角Debug一栏中的的红色断点标记，打开断点设置界面;
     * 第三步:点击左上角的+号，添加“Java Excepiton Breakpoints"将IllegaL ArgumentException添加进去;
     * 第四步:切换到我们的断点处，在“Disable until breakpoint is hit” 处选择该异常。
     */

}
