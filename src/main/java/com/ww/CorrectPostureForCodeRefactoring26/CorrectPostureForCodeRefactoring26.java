package com.ww.CorrectPostureForCodeRefactoring26;

/**
 * @author: Sun
 * @create: 2019-12-17 16:56
 * @version: v1.0
 */
public class CorrectPostureForCodeRefactoring26 {

    /**
     * 在软件迭代过程中常常会因为原来的功能有BUG、无法满足新的需求、性能遇到瓶颈等原因为需要对代码进行重构。
     * 本节问题：
     * (1)什么是重构?
     * 重构(refactoring)是这样的一个过程: 在不改变代码外在行为的前提下，对代码进行修改，以改进程序的内部结构。本质上讲，重构就是在代码写好之后，
     * 改进它的设计。
     *
     * (2)何时重构?
     * ①添加新功能的时候：
     * 当因为新的需求要为系统添加新功能时，可能会发现很多问题。
     * 比如发现不同的类需要使用同一段代码，而这段代码在之前的一个类中;
     * 发现分支条件越来越多，难以维护;
     * 发现随着功能的增强，函数的参数列表越来越长，代码长度太长难以理解等。
     * 此时可以借助开发新功能的时机去对代码进行重构。
     * ②修复错误时重构
     * 当我们收到一份来自测试或者技术支持提过来的“编码缺陷”的jira时几乎就意味着我们要重构代码了。可能是接口的结果不符合预期，也可能是接口的性能达不到要求。
     * ③代码审查时重构
     * 很多公司都会有代码审查机制，复杂、重要的项目都要通过代码审查( Code Review)后才能，上线。在代码审查阶段，代码审查人员可能对我们代码的
     * 可读性、可维护性、代码的性能等进行评价并给出建议。如果代码审查人员给出了比较合理的建议，此时就要对有问题的代码进行重构。
     *
     * (3)如何保证重构代码的正确性？
     * 单元测试
     *
     * (4)一些重构技巧
     * Java代码的重构主要包括以下几个方面：代码的“ 坏味道”，对象之间的重构，数据的重构，函数调用的重构和表达式简化的重构。
     * ①代码的坏味道：代码的坏味道有很多种，常见的包括:重复代码，过长的函数，过大的类，过长的参数列表，过多的注释等。
     * 重复代码通常有3种情况：
     * 1、同一个类的多个函数包含重复代码，此时可以将公共代码提取为该类的私有函数，在上述函数中调用;
     * 2、互为兄弟的子类之间包含相同的代码，此时应该将重复代码上移到父类中;
     * 3、两个毫不相关的出现重复代码，此时应该将公共代码抽取到一个新类中。
     * 如果函数过长，读懂函数的逻辑将变得非常困难，接手代码的人需要花费较多时间才能读懂这些代码。在工作中，如果接手的代码某一行报错 ，但是代码行数
     * 很多，一般需要读懂整个函数逻辑才敢动手修改，是一件非常痛苦的事情。根据《手册》" [推荐]单个函数总行数不超过80行”的建议，需要将大函数拆分成
     * 多个子步骤( 函数)。最好的办法是搞清楚该函数分为几个步骤，分别将每个子步骤提取为一个子函数即可。
     * 如果类过大，通常是函数太多，成员变量过多。如果是函数太多，通常可以根据将函数归类，拆分到不同的类中，一个常见的做法是将OrderService' 、
     * 拆成OrderSearchService和OrderOperateService分别承担订单的搜索和非搜索业务。如果是成员变量过多，则需要考虑是否应该多个成员变量抽取
     * 到某个类中，后者一部分成员变量是否应该属于某个类,通过将新类当做成员变量来消减成员变量的数量。
     * 如果函数的参数较长，传参时需仔细核实参数列表以避免误传。如果对外暴露的接口，需要新增一个属性时，为了避免修改签名让二方被迫跟着修改调用的代码，
     * 就需要新增一个接口，这种不优雅的方案。根据《手册》的分层领域模型规约部分的建议，应该将请求的参数封装成查询对象。这也是一个宝贵的开发经验，
     * 尤其是暴露给二方RPC接口时，如果未来可能修改参数，尽量使用对象来接收参数，避免因函数签名不同而导致错误。
     * 如果代码中的注释过多，应该简化注释，尽量只在关键步骤，特殊逻辑上添加注释，应该使用变量和函数名来表意。
     * ②重新组织函数
     * 1、当函数中条件表达式较为复杂时，应该将复杂表达式或者其中一部分放到临时变量中，并通过变量名来表达其用途，也可以将部分表达式在一起组成一个
     * 含义，还可以将其封装到函数中。
     * 2、如果不在循环中对一个含义不明确的临时变量多次赋值时，需对每一次都创建独立的临时变量。
     * 3、注意线程安全问题
     * 4、我们尽量使用JDK封装好的类，使用大公司开源的工具类，避免重复劳动。
     */
}
