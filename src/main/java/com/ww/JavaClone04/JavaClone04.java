package com.ww.JavaClone04;

/**
 * @author: Sun
 * @create: 2019-11-15 11:22
 * @version: v1.0
 */
public class JavaClone04 {

    /**
     *《手册》第10页有关于Object 的clone 问题的描述1:
     * 【推荐】慎用Object的clone方法来拷贝对象。
     * 说明:对象clone方法默认是浅拷贝，若想实现深拷贝需覆写clone方法实现域对象的深度遍历式拷贝。
     */

    /**
     * 本节问题：
     * 1、什么是浅拷贝?  浅拷贝和深拷贝的区别是什么?
     * 答案：浅拷贝将返回该类的新的实例，该实例的引用类型对象共享。
     * 深拷贝也会返回该类的新的实例，但是该实例的引用类型属性也是拷贝的新对象。
     *
     * 2、拷贝的目的是什么?
     * 克隆出属性相同的对象方便我们的使用。
     *
     * 3、拷贝的使用场景是什么?'
     * ① 我们需要构造多个属性差不多的对象，为了不再手动new出多个对象并为每个对象set对应的值，可以拷贝一份相同的对象，只修改相应字段的值即可。
     * ② 多线程情况下，如果多个线程共享同一个对象会引发很多不必要的麻烦。
     *
     * 4、如何实现深拷贝?
     * ①手动深拷贝，重写Object类中的clone()方法实现对每个引用类型对象的重建。
     * ②使用JDK序列化方式实现
     * ③使用commons-lang3中SerializationUtils.clone()方法
     * ④使用Gson库进行Json序列化实现
     */
}
