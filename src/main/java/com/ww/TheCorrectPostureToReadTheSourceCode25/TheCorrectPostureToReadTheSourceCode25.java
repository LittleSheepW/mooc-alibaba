package com.ww.TheCorrectPostureToReadTheSourceCode25;

/**
 * @author: Sun
 * @create: 2019-12-16 11:18
 * @version: v1.0
 */
public class TheCorrectPostureToReadTheSourceCode25 {

    /**
     * 阅读源码时进阶的一个重要步骤，在阅读源码之前我们要清楚要通过源码学到什么。
     * 通过阅读源码可以学习到很多知识，如:
     * 编码规范，包括类、函数、属性的命名，注释的规范等;
     * 优秀程序员的编程思想;
     * 学习一些高级的编程技巧;
     * 某些功能或特性的核心原理;
     * 可以学习到一些好的设计原则、设计模式如何落地。
     * <p>
     * 阅读源码的思路：
     * (1)从设计者的角度看源码(最有效的方式)
     * 源码，尤其是复杂源码，都是符合“任务拆分”的原则的，即一个大的功能分为几个核心的步骤，分别编写代码。
     * 我们学习源码要想好编写这个功能应该有哪些步骤，再去和源码对比。这样才能验证自己思考问题的角度是否正确，是否有遗漏。通过对比能够清楚地知道作
     * 者为什么要这么设计，作者的源码比自己所设想的好在哪里，这样才不容易遗忘。通过这种方式去读源码能够不断纠正我们的思路，不断发现我们的问题。
     * (2)先整体后局部
     * 为了避免过早陷于局部而缺乏全局观念，应该先从整体了解一个技术的核心模块再去学习每个具体模块的源码。比如我们学习dubbo源码之前必须先了解该
     * 框架的主要模块以及之间的关系。先了解架构的核心角色以及调用关系，再去学习源码会更容易一些。
     * (3)由易到难
     * 根据自己的阶段选择和自己的框架阅读。先从简单框架入手，积累经验后快速将这种学习的能力迁移到自己想研究的框架中去。
     * 对于初学者而言，可以先从开发中常用的简单的框架入手，如commons-lang、commons-collections、guava 等。从看这些简单的源码积累经验，
     * 然后再去学习spring、spring boot、dubbo等框架的源码。另外要先保证能够熟练使用，再去学习源码效果会更好一些。如果连使用都不会就直接去
     * 学习源码，是一种非常不理智的行为。
     * (4)带着问题看源码
     * 看源码和学某个技术之前，要重点思考几个能从整体理解该项目的问题:
     * · 这个项目主要核心功能是什么?
     * · 这个框架能解决什么问题?
     * · 有没有同类的框架，有啥异同?
     * (5)带着场景学源码
     * 比如从设计模式的角度去学习源码。
     * · 可以从设计模式的六大原则来思考源码的设计，思考源码是如何体现这几种原则的。设计模式六大原则:单-职责原则、里氏替换原则、依赖倒置原则、
     * 接口隔离原则、迪米特法则、开放封闭原则。
     * · 还可以结合《设计模式之禅》这本书或者菜鸟教程中设计模式的教程，了解具体某些设计模式的特点、使用场景、优点、缺点等。然后从JDK或者Spring
     * 等自己想学习的框架源码中去寻找这些设计模式的身影。通过这种方式可以更清楚设计模式该如何落地，从更多角度去了解源码。
     * (6)通过源码单元测试来学习源码
     * 大多数知名的Java开源项目都会有非常完善的单元测试，这是我们学习源码的一个非常重要的突破口。我们可以运行单元测试来调试源码，熟悉核心类的功能。
     * 可以直接根据类名搜索，也可以通过找到该类，使用“find usages"功能来找到其单元测试代码或者使用control+option+H快捷键。
     * <p>
     * 阅读源码的技巧：
     * (1)实现“简易版”是学习的重要途径
     * 比如学习Spring 源码之前，可以根据自己平时使用Spring 的方式，自己实现简易版的Spring，记录自己编写代码的核心步骤，以及核心步骤的缺点
     * 和遇到的问题。待真正去阅读源码时，很多问题豁然开朗。
     * (2)寻找程序入口是一个学习源码的切入点
     * 通过寻找程序启动的入口，对入口断点调试，可以从源头了解框架的启动流程和运行原理。可以通过打断点，然后通过调用栈逆向寻找入口;可以找网上的博客
     * 的源码分析找到入口打断点。
     * (3)阅读源码时要重视函数的命名
     * 往往优秀的源码函数命名都非常贴切。可以通过IDEA的structure,来了解源码中某个类的核心函数。核心类有哪些核心的函数，这些函数的功能又是什么，
     * 对学习源码帮助很大。通过单个函数快速了解其意图，对学习源码帮助很大。
     * (4)多看函数列表
     * 在看源码时建议打开函数列表，进入某个类时优先看该类有哪些公有函数。这样做有助于帮助你从整体了解该类，更全面地了解一个类的功能。
     * (5)阅读源码时要重视源码的注释
     * 优秀的开源项目的类、函数甚至成员变量都会有非常详尽的注释。注释可以快速帮助我们理解源码，帮助我们了解一些重要细节。比如很多代码会给出其核心
     * 步骤，此时一定要先阅读函数上面的注释和内部给出的核心步骤再去读源码。
     * (6)关注目标类继承的类或者实现的接口
     * 目标类的父类和实现的接口是研究该类功能和特征的重要突破口。
     */
}
