package com.ww.UnitTestConstructsTheCorrectPostureOfTheData21;

/**
 * @author: Sun
 * @create: 2019-12-06 11:18
 * @version: v1.0
 */
public class UnitTestConstructsTheCorrectPostureOfTheData21 {

    /**
     * 单元测试的重要环节就是构造测试数据，单元测试构造测试数据往往非常耗时，这也是很多人不喜欢写单元测试的重要原因之一。
     * 本节重点讲述有哪些单元测试中构造数据的方式，各种构造测试数据方式的优劣以及实际开发中该如何选择。
     *
     * 构造单测数据的方式：
     * 一、手动，所谓手动构造单元测试工具，是指
     * (1)在测试类或者函数中直接声明测试数据；
     * (2)或在初始化函数中填充数据；
     * (3)还可以在测试类中编写私有mock数据的函数来实现。
     * 上述手动构造测试对象，当属性较多时，容易出错而且占据源码空间，而且不太优雅。
     *
     * 二、半自动，当所要构造的数据为复杂对象(属性较多的对象)时，手动构造对象非常耗时，而且属性设置容易遗漏。
     * 所谓半自动是指使用插件自动填充所要构造对象的属性。
     * (1)比如可以使用Generate All setters IDEA插件，选择 generate all setter withdefault value“填充默认值，效率提高很多。
     * (2)还有一种非常常见的”半自动“构造测试数据的方式，采用JSON序列化和反序列化方式。将构造的对象通过JSON序列化到JSON文件里，使用时反序列化为Java对象即可。
     *
     * 三、自动，半自动的方式构造单元测试数据效率仍然不够高，而且缺乏灵活性，比如需要构造随机属性的对象，需要构造不同属性的N个对象，就会造成编码复杂度陡增。
     * 因此，java-faker 和easy-random应运而生。
     * (1)java-faker。Java构造测试数据中最常见的一种场景是:构造字符串。如果想随机构造人名、地名、天气、学校、颜色、职业，甚至符合某正则表达式的
     * 字符串等，肿么办?iava- faker是不二之诜。
     * (2)Java-faker虽然可以构造不同种类的字符串测试数据，但是如果需要构造复杂对象就有些”力不从心“。此时easy-random就要上场了。
     * easy-random可以轻松构造复杂对象，支持定义对象中集合长度，字符串长度范围，生成集合等。使用easy-random,直接调用easyRandom#nextObject
     * 一行代码即可自动构建测试对象。
     * Easy-random还支持通过EasyRandomParameters来定制构造对象的细节，如对象池大小、字符集、时间范围、日期范围、字符串长度范围、集合大小的范围等。
     */
}
